import random
'''
Худшее время: O(n^2)
Среднее время: omega(n^2 / 2^p) где p - количество инкриментов
Лучшее время: O(nlog(n))

Затраты памяти: O(1)

Сортировка расчёской — улучшение сортировки пузырьком. Её идея состоит в том, 
чтобы «устранить» элементы с небольшими значения в конце массива, которые замедляют 
работу алгоритма. Если при пузырьковой и шейкерной сортировках при переборе массива 
сравниваются соседние элементы, то при «расчёсывании» сначала берётся достаточно большое 
расстояние между сравниваемыми значениями, а потом оно сужается вплоть до минимального.
Первоначальный разрыв нужно выбирать не случайным образом, а с учётом специальной величины 
— фактора уменьшения, оптимальное значение которого равно 1,247. Сначала расстояние 
между элементами будет равняться размеру массива, поделённому на 1,247; на каждом 
последующем шаге расстояние будет снова делиться на фактор уменьшения — и так до 
окончания работы алгоритма.
'''

def comb_sort(array):
    shrink_factor = 1.247  # Фактор уменьшения
    gap = len(array)
    sorted = False
    while not sorted:
        gap = int(gap / shrink_factor)
        if gap <= 1:
            sorted = True
        i = 0
        while i + gap < len(array):
            if array[i] > array[i + gap]:
                array[i], array[i + gap] = array[i + gap], array[i]
                sorted = False
            i += 1
    return array


# Пример использования
array = [random.randint(0, 100) for i in range(100)]
comb_sort(array)
print("Отсортированный массив:", array)
